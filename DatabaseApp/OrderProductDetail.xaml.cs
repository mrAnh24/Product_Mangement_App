using DatabaseApp.Data;
using DatabaseApp.Data.DataModels;
using DocumentFormat.OpenXml.Office2010.Excel;
using Microsoft.Office.Interop.Excel;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IdentityModel.Tokens.Jwt;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.ListView;
using Application = Microsoft.Office.Interop.Excel.Application;

namespace DatabaseApp
{
    /// <summary>
    /// Interaction logic for OrderProductDetail.xaml
    /// </summary>
    public partial class OrderProductDetail : System.Windows.Window
    {
        SqlConnection con = new SqlConnection("Server=.;Database=dbdemo;Trusted_Connection=SSPI;MultipleActiveResultSets=true;TrustServerCertificate=true");
        public string connectionString = "Data Source=OS-GPCP-GPDN171\\MSSQLSERVER01;Initial catalog=dbdemo;Persist Security info=True;Encrypt=false;;Trusted_Connection=SSPI;MultipleActiveResultSets=true;TrustServerCertificate=true";
        List<CustomerListFinal> products = new List<CustomerListFinal>();
        public string chosen;
        public double number;

        public OrderProductDetail(System.Windows.Window parentWindow)
        {
            Owner = parentWindow;
            InitializeComponent();
            number = 0;
            txtHeader.Text = $"Order {AccountOrder.index} Products";
            GetProducts();
            foreach (CustomerListFinal item in products)
            {
                if(item.InputName == AccountOrder.currentInputName && item.CreatedDate == AccountOrder.currentDate)
                {
                    number += item.Amount;
                }
            }
            txtNumber.Text = number.ToString();
            txtTotal.Text = AccountOrder.currentBill + " $";
        }

        void GetProducts()
        {
            var db = new CustomerListFinalDb();
            products = db.customerListFinal.ToList();
            dgProduct.ItemsSource = products;
        }

        void Refresh()
        {
            OrderProductDetail orderProductDetail = new OrderProductDetail(this);
            Opacity = 0.2;
            orderProductDetail.ShowDialog();
            Opacity = 1;
            this.Close();
        }

        private void DataGridRow_Selected(object sender, RoutedEventArgs e)
        {
            var row = sender as DataGridRow;
            var select = row.DataContext as CustomerListFinal;
            chosen = select.ProductCode;
            GetProductInfo();
        }

        void GetProductInfo()
        {
            con.Open();
            SqlCommand cmd = new SqlCommand("Select * from Products where ProductCode = @ProductCode", con);
            cmd.Parameters.AddWithValue("@ProductCode", chosen);
            SqlDataReader da = cmd.ExecuteReader();
            while (da.Read())
            {
                txtProduct.Text = da.GetValue(0).ToString();
                txtProductCode.Text = da.GetValue(1).ToString();
                txtDescription.Text = da.GetValue(2).ToString();
                txtPrice.Text = da.GetValue(3).ToString();
            }
            con.Close();
        }

        public void ActivityLog()
        {
            con.Open();
            string currentdatetime = System.DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            string query = "INSERT INTO ActivityLog VALUES ('" + Login.GetID + "','" + Login.passText + "','" + Login.GetRole + "','" + $"Order {AccountOrder.index} products receipt printed" + "', '" + "Checkout status" + "', '" + currentdatetime + "')"; ;
            SqlCommand cmd = new SqlCommand(query, con);
            cmd.ExecuteNonQuery();
            con.Close();
        }

        private void dgProduct_AutoGeneratedColumns(object sender, EventArgs e)
        {
            ShowResult();
        }

        private void cbSearch_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            switch (cbSearch.SelectedIndex.ToString())
            {
                case "0":
                    cbSearch.Text = "Name";
                    break;
                case "1":
                    cbSearch.Text = "Code";
                    break;
                case "2":
                    cbSearch.Text = "Amount";
                    break;
            }
        }

        void ShowResult()
        {
            dgProduct.Columns[0].Visibility = Visibility.Hidden;
            dgProduct.Columns[1].Visibility = Visibility.Hidden;
            dgProduct.Columns[2].Visibility = Visibility.Hidden;
            dgProduct.Columns[3].Visibility = Visibility.Hidden;
            dgProduct.Columns[5].Header = "PCode";
            dgProduct.Columns[8].Visibility = Visibility.Hidden;

            products.RemoveAll(x => x.CreatedDate != AccountOrder.currentDate);
            txtCount.Text = $"Number of products: {dgProduct.Items.Count}";
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            AccountOrder.index = null;
        }

        private void btnRefresh_Click(object sender, RoutedEventArgs e)
        {
            Refresh();
        }

        private void btnBack_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void btnSearch_Click(object sender, RoutedEventArgs e)
        {
            chosen = null;
            try
            {
                if (tbSearchBox.Text == "")
                {
                    System.Windows.MessageBox.Show("Search box blank", "Error");
                    GetProducts();
                }
                else
                {
                    if (cbSearch.SelectedIndex == 0)
                    {
                        GetProducts();
                        products.RemoveAll(x => x.Product != tbSearchBox.Text);
                        if (dgProduct.Items.Count == 0)
                        {
                            System.Windows.MessageBox.Show("No product found", "Error");
                            GetProducts();
                        }
                    }
                    else if (cbSearch.SelectedIndex == 1)
                    {
                        GetProducts();
                        products.RemoveAll(x => x.ProductCode != tbSearchBox.Text);
                        if (dgProduct.Items.Count == 0)
                        {
                            System.Windows.MessageBox.Show("No product found", "Error");
                            GetProducts();
                        }
                    }
                    else if (cbSearch.SelectedIndex == 2)
                    {
                        GetProducts();
                        products.RemoveAll(x => x.Amount.ToString() != tbSearchBox.Text);
                        if (dgProduct.Items.Count == 0)
                        {
                            System.Windows.MessageBox.Show("No product found", "Error");
                            GetProducts();
                        }
                    }
                    else
                    {
                        System.Windows.MessageBox.Show("Choose a filter", "Error");
                        GetProducts();
                    }
                }
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show(ex.Message, "Message", (MessageBoxButton)MessageBoxButtons.OK, (MessageBoxImage)MessageBoxIcon.Error);
            }
            txtCount.Text = $"Total accounts: {dgProduct.Items.Count}";
        }

        private void btnSearchClear_Click(object sender, RoutedEventArgs e)
        {
            tbSearchBox.Clear();
        }

        private void btnPrint_Click(object sender, RoutedEventArgs e)
        {
            string currentdatetime = DateTime.Now.ToString("yyyyMMddHHmmss");
            string LogFolder = @"D:\TDA_intern\Projects\DatabaseApp\Product_Mangement_App-master\Logs";
            string queryString = "SELECT * FROM CustomerListFinal WHERE InputName = @InputName AND CreatedDate = @CreatedDate";
            string filePath = $@"D:\TDA_intern\Projects\DatabaseApp\Product_Mangement_App-master\Logs\Receipts\ Order {AccountOrder.index}_{AccountOrder.currentInputName} products.XLSX";

            var result = System.Windows.MessageBox.Show("Print the receipt?", "Notification", (MessageBoxButton)MessageBoxButtons.YesNo, (MessageBoxImage)MessageBoxIcon.Warning);
            if (result == MessageBoxResult.Yes)
            {
                try
                {
                    if (File.Exists(filePath))
                        File.Delete(filePath);

                    using (SqlConnection connection = new SqlConnection(connectionString))
                    {
                        connection.Open();
                        using (SqlCommand command = new SqlCommand(queryString, connection))
                        {
                            command.Parameters.AddWithValue("InputName", AccountOrder.currentInputName);
                            command.Parameters.AddWithValue("CreatedDate", AccountOrder.currentDate);
                            using (SqlDataReader reader = command.ExecuteReader())
                            {
                                //Create new Excel application and workbook
                                Application excelApp = new Application();
                                Workbook excelWorkbook = excelApp.Workbooks.Add();
                                Worksheet excelWorksheet = excelWorkbook.Worksheets[1];

                                //Add the headers to first row
                                int col = 1;
                                for (int i = 4; i < reader.FieldCount; i++)
                                {
                                    excelWorksheet.Cells[1, col].Value2 = reader.GetName(i);
                                    excelWorksheet.Cells[1, col].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Yellow);
                                    excelWorksheet.Cells[1, col].Borders.LineStyle = 1;
                                    excelWorksheet.Cells[1, col].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                                    col++;
                                }

                                //Iterate through data start from second row and insert into worksheet
                                int row = 2;
                                while (reader.Read())
                                {
                                    col = 1;
                                    for (int i = 4; i < reader.FieldCount; i++)
                                    {
                                        excelWorksheet.Cells[row, col].EntireColumn.NumberFormat = "@";
                                        excelWorksheet.Cells[row, col].Value2 = reader[i];
                                        excelWorksheet.Cells[row, col].EntireColumn.AutoFit();
                                        excelWorksheet.Cells[row, col].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                                        excelWorksheet.Cells[row, col].Borders.LineStyle = 1;
                                        excelWorksheet.Columns["E"].NumberFormat = "yyyy-MM-dd HH:mm:ss";
                                        col++;
                                    }
                                    row++;
                                }
                                //UpdateFormat(filePath);
                                //Save workbook and close Excel application
                                excelWorkbook.SaveAs(filePath);
                                excelWorkbook.Close();
                                excelApp.Quit();

                                ActivityLog();
                                System.Windows.MessageBox.Show("Receipt printed");
                            }
                        }
                    }
                }
                catch (Exception exception)
                {
                    using (StreamWriter sw = File.CreateText(LogFolder + "\\" + "ErrorLog" + currentdatetime + ".log"))
                    {
                        sw.WriteLine(exception.ToString());
                    }
                }
            }
        }
    }
}
