using DatabaseApp.Data;
using System;
using DatabaseApp.Data.DataModels;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Data;
using Microsoft.Office.Interop.Excel;
using Window = System.Windows.Window;
using System.Windows.Forms;

namespace DatabaseApp
{
    /// <summary>
    /// Interaction logic for AccountRequests.xaml
    /// </summary>
    public partial class AccountRequests : Window
    {
        List<Activity> activities = new List<Activity>();
        List<AccountNotify> accountNotify = new List<AccountNotify>();
        List<CustomerPreOrder> customerPreOrder = new List<CustomerPreOrder>();
        public static string index;
        public double trigger;
        public string option1 = "OFF";
        public string option2 = "OFF";
        public string dateTime = System.DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

        //PreOrder
        public string productCode;
        public string productName;
        public string OrderStatus;
        public double currentAmount;
        public double preOrderAmount;
        public double newAmount;

        public AccountRequests()
        {
            InitializeComponent();
            cbFilter.SelectedIndex = 0;
            //ActivityLog();
        }
        DataTableCollection tableCollection;
        SqlConnection con = new SqlConnection("Server=.;Database=dbdemo;Trusted_Connection=SSPI;MultipleActiveResultSets=true;TrustServerCertificate=true");

        private void btnRefresh_Click(object sender, RoutedEventArgs e)
        {
            new AccountRequests().Show();
            this.Close();
        }

        void ProductListInfo()
        {
            con.Open();
            SqlCommand cmd = new SqlCommand("SELECT * FROM ProductLists WHERE ProductCode = @ProductCode", con);
            cmd.Parameters.AddWithValue("@ProductCode", productCode);
            SqlDataReader da = cmd.ExecuteReader();
            while (da.Read())
            {
                productName = da.GetValue(1).ToString();
                currentAmount = Convert.ToDouble(da.GetValue(5));
                OrderStatus = da.GetValue(6).ToString();
            }
            con.Close();
        }

        private void cbFilter_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            //dgRequest.Visibility = Visibility.Collapsed;
            //dgPreOrder.Visibility = Visibility.Collapsed;
            btnApprove.Visibility = Visibility.Collapsed;
            option1 = "ON";
            option2 = "ON";
            trigger = 1;
            switch (cbFilter.SelectedIndex.ToString())
            {
                case "0":
                    cbFilter.Text = "Activities";
                    trigger = 2;
                    GetActivity();
                    break;
                case "1":
                    cbFilter.Text = "Account requests";
                    GetRequest();
                    break;
                case "2":
                    cbFilter.Text = "Pre-Order";
                    btnApprove.Visibility = Visibility.Visible;
                    GetPreOrder();
                    break;
            }
            PreOrderBonus();
            Toggle1();
            Toggle2();
        }

        void GetActivity()
        {
            var db = new ActivityDb();
            activities = db.activities.ToList();
            dgActivity.ItemsSource = activities;
            Filter();
        }

        void GetRequest()
        {
            var db = new AccountNotifyDb();
            accountNotify = db.accountNotify.ToList();
            dgActivity.ItemsSource = accountNotify;
            Filter();
        }

        void GetPreOrder()
        {
            var db = new CustomerPreOrderDb();
            customerPreOrder = db.CustomerPreOrders.ToList();
            dgActivity.ItemsSource = customerPreOrder;
            Filter();
        }

        private void dgActivity_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dgActivity.Columns[0].Visibility = Visibility.Hidden;
            dgActivity.Columns[1].Visibility = Visibility.Hidden;
            dgActivity.Columns[2].Visibility = Visibility.Hidden;

            if (cbFilter.SelectedIndex == 0)
            {
                dgActivity.Columns[6].Visibility = Visibility.Hidden;
                dgActivity.Columns[7].Visibility = Visibility.Hidden;
            }
            else if (cbFilter.SelectedIndex == 1)
            {
                dgActivity.Columns[3].Visibility = Visibility.Hidden;
                dgActivity.Columns[4].Visibility = Visibility.Hidden;
                dgActivity.Columns[5].Visibility = Visibility.Hidden;
                dgActivity.Columns[7].Visibility = Visibility.Hidden;
                dgActivity.Columns[8].Visibility = Visibility.Hidden;
                dgActivity.Columns[10].Visibility = Visibility.Hidden;
                accountNotify.RemoveAll(x => x.Category != "Request");
            }
            else if (cbFilter.SelectedIndex == 2)
            {
                dgActivity.Columns[5].Visibility = Visibility.Hidden;
                dgActivity.Columns[6].Visibility = Visibility.Hidden;
                dgActivity.Columns[8].Visibility = Visibility.Hidden;
            }
        }

        void PreOrderBonus()
        {
            btnCancel.Visibility = Visibility.Visible;

            if (trigger == 1)
            {
                txtfilter1.Text = "Completed";
                txtfilter2.Text = "Canceled";
            }
            else
            {
                btnCancel.Visibility = Visibility.Collapsed;
                txtfilter1.Text = "Admin log";
                txtfilter2.Text = "Notification";
            }
        }

        private void DataGridRow_Selected(object sender, RoutedEventArgs e)
        {
            var row = sender as DataGridRow;
            if (cbFilter.SelectedIndex == 0)
            {
                var select = row.DataContext as Activity;
                index = select.ActivityID;
            }
            else if (cbFilter.SelectedIndex == 1)
            {
                var select = row.DataContext as AccountNotify;
                index = select.NotifyID;
            }
            else if (cbFilter.SelectedIndex == 2)
            {
                var select = row.DataContext as CustomerPreOrder;
                index = select.PreOrderID;
                productCode = select.ProductCode;
                preOrderAmount = select.Amount;
            }
        }

        void Filter()
        {
            if (cbFilter.SelectedIndex == 0)
            {
                if (option1 == "OFF")
                {
                    activities.RemoveAll(x => x.Username == "admin");
                }

                if (option2 == "OFF")
                {
                    activities.RemoveAll(x => x.Category == "Notification");
                }
            }
            else if (cbFilter.SelectedIndex == 1)
            {
                if (option1 == "OFF")
                {
                    accountNotify.RemoveAll(x => x.Status == "Complete");
                }

                if (option2 == "OFF")
                {
                    accountNotify.RemoveAll(x => x.Status == "Cancel");
                }
            }
            else if (cbFilter.SelectedIndex == 2)
            {
                if (option1 == "OFF")
                {
                    customerPreOrder.RemoveAll(x => x.Condition == "Complete");
                }

                if (option2 == "OFF")
                {
                    customerPreOrder.RemoveAll(x => x.Condition == "Cancel");
                }
            }

        }

        void Toggle1()
        {
            if (option1 == "OFF")
            {
                option1 = "ON";
                Mfilter1.Fill = Brushes.CornflowerBlue;
                Lfilter1.Fill = Brushes.CornflowerBlue;
                Rfilter1.Fill = Brushes.WhiteSmoke;
            }
            else
            {
                option1 = "OFF";
                Mfilter1.Fill = Brushes.LightGray;
                Lfilter1.Fill = Brushes.WhiteSmoke;
                Rfilter1.Fill = Brushes.LightGray;
            }

            if (cbFilter.SelectedIndex == 0)
            {
                GetActivity();
            }
            else if (cbFilter.SelectedIndex == 1)
            {
                GetRequest();
            }
            else if (cbFilter.SelectedIndex == 2)
            {
                GetPreOrder();
            }
        }
        void Toggle2()
        {
            if (option2 == "OFF")
            {
                option2 = "ON";
                Mfilter2.Fill = Brushes.CornflowerBlue;
                Lfilter2.Fill = Brushes.CornflowerBlue;
                Rfilter2.Fill = Brushes.WhiteSmoke;
            }
            else
            {
                option2 = "OFF";
                Mfilter2.Fill = Brushes.LightGray;
                Lfilter2.Fill = Brushes.WhiteSmoke;
                Rfilter2.Fill = Brushes.LightGray;
            }

            if (cbFilter.SelectedIndex == 0)
            {
                GetActivity();
            }
            else if (cbFilter.SelectedIndex == 1)
            {
                GetRequest();
            }
            else if (cbFilter.SelectedIndex == 2)
            {
                GetPreOrder();
            }
        }

        private void btnFilter1_Click(object sender, RoutedEventArgs e)
        {
            Toggle1();
        }

        private void btnFilter2_Click(object sender, RoutedEventArgs e)
        {
            Toggle2();
        }

        private void btnApprove_Click(object sender, RoutedEventArgs e)
        {
            if(index != null)
            {
                var result = System.Windows.MessageBox.Show("Approve this order?", "Confirmation", MessageBoxButton.YesNo, (MessageBoxImage)MessageBoxIcon.Information);
                if (result == MessageBoxResult.Yes)
                {
                    con.Open();
                    SqlCommand cmd = new SqlCommand("UPDATE CustomerPreOrder SET Condition = @Condition WHERE PreOrderID = @PreOrderID", con);
                    cmd.Parameters.AddWithValue("@PreOrderID", index);
                    cmd.Parameters.AddWithValue("@Condition", "Complete");
                    cmd.ExecuteNonQuery();
                    con.Close();

                    ProductListInfo();
                    result = System.Windows.MessageBox.Show($"Add {preOrderAmount.ToString()} to {productName} total amount?", "Extra", MessageBoxButton.YesNo, (MessageBoxImage)MessageBoxIcon.Information);
                    if (result == MessageBoxResult.Yes)
                    {
                        newAmount = currentAmount + preOrderAmount;

                        // Update amount of product for ProductList
                        con.Open();
                        cmd = new SqlCommand("UPDATE ProductLists SET Amount = @Amount WHERE ProductCode = @ProductCode", con);
                        cmd.Parameters.AddWithValue("@ProductCode", productCode);
                        cmd.Parameters.AddWithValue("@Amount", newAmount.ToString());
                        cmd.ExecuteNonQuery();
                        con.Close();

                        // Change order status to available (if not)
                        if (OrderStatus != "Available" || OrderStatus != "On sale")
                        {
                            con.Open();
                            cmd = new SqlCommand("UPDATE ProductLists SET Status = @Status WHERE ProductCode = @ProductCode", con);
                            cmd.Parameters.AddWithValue("@ProductCode", productCode);
                            cmd.Parameters.AddWithValue("@Status", "Available");
                            cmd.ExecuteNonQuery();
                            con.Close();

                            con.Open();
                            cmd = new SqlCommand($"INSERT INTO AccountNotify VALUES ('" + Login.GetID + "','" + Login.passText + "','" + Login.GetRole + "','" + $"Product {productName} now available" + "','" + $"Product {productName} restock from 0" + "','" + "Product news" + "','" + "None" + "', '" + "Complete" + "', '" + dateTime + "')", con);
                            cmd.ExecuteNonQuery();
                            con.Close();
                        }

                        System.Windows.MessageBox.Show($"{preOrderAmount.ToString()} {productName} added", "Order approved");
                    }
                    else
                    {
                        System.Windows.MessageBox.Show("Order approved", "Notification");
                    }

                    index = null;
                    GetPreOrder();
                }              
            }
            else
            {
                System.Windows.MessageBox.Show("Choose an order", "Error");
            }
        }

        private void btnCancel_Click(object sender, RoutedEventArgs e)
        {
            if (cbFilter.SelectedIndex == 1)
            {
                var result = System.Windows.MessageBox.Show("Cancel this request?", "Confirmation", MessageBoxButton.YesNo, (MessageBoxImage)MessageBoxIcon.Information);
                if (result == MessageBoxResult.Yes)
                {
                    con.Open();
                    SqlCommand cmd = new SqlCommand("UPDATE AccountNotify SET Status = @Status WHERE NotifyID = @NotifyID", con);
                    cmd.Parameters.AddWithValue("@NotifyID", index);
                    cmd.Parameters.AddWithValue("@Status", "Cancel");
                    cmd.ExecuteNonQuery();
                    con.Close();

                    index = null;
                    GetRequest();
                }
                
            }
            else if (cbFilter.SelectedIndex == 2)
            {
                var result = System.Windows.MessageBox.Show("Cancel this order?", "Confirmation", MessageBoxButton.YesNo, (MessageBoxImage)MessageBoxIcon.Information);
                if (result == MessageBoxResult.Yes)
                {
                    con.Open();
                    SqlCommand cmd = new SqlCommand("UPDATE CustomerPreOrder SET Condition = @Condition WHERE PreOrderID = @PreOrderID", con);
                    cmd.Parameters.AddWithValue("@PreOrderID", index);
                    cmd.Parameters.AddWithValue("@Condition", "Cancel");
                    cmd.ExecuteNonQuery();
                    con.Close();

                    index = null;
                    GetPreOrder();
                }
            }
        }

        private void btnDetails_Click(object sender, RoutedEventArgs e)
        {
            if (cbFilter.SelectedIndex == 0)
            {
                GetActivity();
            }
            else if (cbFilter.SelectedIndex == 1)
            {
                GetRequest();
            }
            else if (cbFilter.SelectedIndex == 2)
            {
                GetPreOrder();
            }
        }

        private void btnPrint_Click(object sender, RoutedEventArgs e)
        {
            if (cbFilter.SelectedIndex == 0)
            {
                GetActivity();
            }
            else if (cbFilter.SelectedIndex == 1)
            {
                GetRequest();
            }
            else if (cbFilter.SelectedIndex == 2)
            {
                GetPreOrder();
            }
        }
    }
}
